name: Universal Recycle CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.9", "3.10", "3.11"]
        exclude:
          # Skip some combinations to reduce CI time
          - os: windows-latest
            python-version: "3.9"
          - os: macos-latest
            python-version: "3.9"

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r recycle/requirements.txt

      - name: Test CLI functionality
        run: |
          python recycle/cli.py list
          python recycle/cli.py --help

      - name: Test manifest parsing
        run: |
          python -c "
          import yaml
          with open('repos.yaml', 'r') as f:
              repos = yaml.safe_load(f)
          print(f'Loaded {len(repos)} repositories')
          for repo in repos:
              print(f'- {repo[\"name\"]} ({repo[\"language\"]})')
          "

      - name: Test plugin system
        run: |
          python -c "
          from recycle.plugin import PLUGIN_REGISTRY, get_plugin
          print(f'Available plugins: {list(PLUGIN_REGISTRY.keys())}')

          # Test plugin instantiation
          from recycle.plugin import RuffAdapter
          adapter = RuffAdapter('/tmp/test', {})
          print(f'RuffAdapter can handle Python: {adapter.can_handle(\"python\")}')
          print(f'RuffAdapter can handle C++: {adapter.can_handle(\"cpp\")}')
          "

  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r recycle/requirements.txt

      - name: Install Git
        if: matrix.os == 'windows-latest'
        run: |
          # Git should already be available, but ensure it's in PATH
          git --version

      - name: Test repository sync (dry run)
        run: |
          # Test the sync functionality without actually cloning
          python -c "
          import yaml
          with open('repos.yaml', 'r') as f:
              repos = yaml.safe_load(f)
          print(f'Would sync {len(repos)} repositories:')
          for repo in repos:
              print(f'  - {repo[\"name\"]} from {repo[\"git\"]} @ {repo[\"commit\"]}')
          "

      - name: Test adapter system (dry run)
        run: |
          python -c "
          from recycle.plugin import run_adapters
          import tempfile
          import os

          # Create a temporary directory to simulate a repository
          with tempfile.TemporaryDirectory() as temp_dir:
              # Create a dummy Python file
              with open(os.path.join(temp_dir, 'test.py'), 'w') as f:
                  f.write('print(\"Hello, World!\")\n')
              
              # Test adapter system
              repo = {'name': 'test-repo', 'language': 'python'}
              results = run_adapters(repo, temp_dir, ['ruff', 'mypy'])
              print(f'Adapter results: {results}')
          "

  lint:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install linting tools
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy

      - name: Run Ruff linter
        run: |
          ruff check recycle/
          ruff format --check recycle/

      - name: Run MyPy type checker
        run: |
          mypy recycle/ --ignore-missing-imports

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run security scan
        uses: github/codeql-action/init@v2
        with:
          languages: python

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  documentation:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check README formatting
        run: |
          # Check if README.md exists and has content
          if [ ! -f "README.md" ]; then
            echo "README.md not found"
            exit 1
          fi

          # Check if README has required sections
          grep -q "## Getting Started" README.md || (echo "Missing Getting Started section" && exit 1)
          grep -q "## Current Status" README.md || (echo "Missing Current Status section" && exit 1)

          echo "README.md validation passed"

      - name: Validate YAML files
        run: |
          # Validate repos.yaml
          python -c "
          import yaml
          with open('repos.yaml', 'r') as f:
              repos = yaml.safe_load(f)
          print(f'Validated repos.yaml with {len(repos)} repositories')
          "

          # Validate GitHub Actions workflow
          python -c "
          import yaml
          with open('.github/workflows/ci.yml', 'r') as f:
              workflow = yaml.safe_load(f)
          print('Validated CI workflow')
          "
